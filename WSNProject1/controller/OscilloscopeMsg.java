/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'OscilloscopeMsg'
 * message type.
 */

public class OscilloscopeMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 18;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 147;

    /** Create a new OscilloscopeMsg of size 18. */
    public OscilloscopeMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new OscilloscopeMsg of the given data_length. */
    public OscilloscopeMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg with the given data_length
     * and base offset.
     */
    public OscilloscopeMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg using the given byte array
     * as backing store.
     */
    public OscilloscopeMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public OscilloscopeMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public OscilloscopeMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg embedded in the given message
     * at the given base offset.
     */
    public OscilloscopeMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new OscilloscopeMsg embedded in the given message
     * at the given base offset and length.
     */
    public OscilloscopeMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <OscilloscopeMsg> \n";
      try {
        s += "  [version=0x"+Long.toHexString(get_version())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [interval=0x"+Long.toHexString(get_interval())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [count=0x"+Long.toHexString(get_count())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [tempData=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_tempData(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [humidityData=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_humidityData(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [photoData=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_photoData(i) & 0xffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [timeStamp=";
        for (int i = 0; i < 1; i++) {
          s += "0x"+Long.toHexString(getElement_timeStamp(i) & 0xffffffff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: version
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'version' is signed (false).
     */
    public static boolean isSigned_version() {
        return false;
    }

    /**
     * Return whether the field 'version' is an array (false).
     */
    public static boolean isArray_version() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'version'
     */
    public static int offset_version() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'version'
     */
    public static int offsetBits_version() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'version'
     */
    public int get_version() {
        return (int)getUIntBEElement(offsetBits_version(), 16);
    }

    /**
     * Set the value of the field 'version'
     */
    public void set_version(int value) {
        setUIntBEElement(offsetBits_version(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'version'
     */
    public static int size_version() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'version'
     */
    public static int sizeBits_version() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: interval
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'interval' is signed (false).
     */
    public static boolean isSigned_interval() {
        return false;
    }

    /**
     * Return whether the field 'interval' is an array (false).
     */
    public static boolean isArray_interval() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'interval'
     */
    public static int offset_interval() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'interval'
     */
    public static int offsetBits_interval() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'interval'
     */
    public int get_interval() {
        return (int)getUIntBEElement(offsetBits_interval(), 16);
    }

    /**
     * Set the value of the field 'interval'
     */
    public void set_interval(int value) {
        setUIntBEElement(offsetBits_interval(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'interval'
     */
    public static int size_interval() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'interval'
     */
    public static int sizeBits_interval() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'id'
     */
    public int get_id() {
        return (int)getUIntBEElement(offsetBits_id(), 16);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(int value) {
        setUIntBEElement(offsetBits_id(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: count
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'count' is signed (false).
     */
    public static boolean isSigned_count() {
        return false;
    }

    /**
     * Return whether the field 'count' is an array (false).
     */
    public static boolean isArray_count() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'count'
     */
    public static int offset_count() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'count'
     */
    public static int offsetBits_count() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'count'
     */
    public int get_count() {
        return (int)getUIntBEElement(offsetBits_count(), 16);
    }

    /**
     * Set the value of the field 'count'
     */
    public void set_count(int value) {
        setUIntBEElement(offsetBits_count(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'count'
     */
    public static int size_count() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'count'
     */
    public static int sizeBits_count() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: tempData
    //   Field type: int[], unsigned
    //   Offset (bits): 64
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'tempData' is signed (false).
     */
    public static boolean isSigned_tempData() {
        return false;
    }

    /**
     * Return whether the field 'tempData' is an array (true).
     */
    public static boolean isArray_tempData() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'tempData'
     */
    public static int offset_tempData(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'tempData'
     */
    public static int offsetBits_tempData(int index1) {
        int offset = 64;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'tempData' as a int[]
     */
    public int[] get_tempData() {
        int[] tmp = new int[1];
        for (int index0 = 0; index0 < numElements_tempData(0); index0++) {
            tmp[index0] = getElement_tempData(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'tempData' from the given int[]
     */
    public void set_tempData(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_tempData(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'tempData'
     */
    public int getElement_tempData(int index1) {
        return (int)getUIntBEElement(offsetBits_tempData(index1), 16);
    }

    /**
     * Set an element of the array 'tempData'
     */
    public void setElement_tempData(int index1, int value) {
        setUIntBEElement(offsetBits_tempData(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'tempData'
     */
    public static int totalSize_tempData() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'tempData'
     */
    public static int totalSizeBits_tempData() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'tempData'
     */
    public static int elementSize_tempData() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'tempData'
     */
    public static int elementSizeBits_tempData() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'tempData'
     */
    public static int numDimensions_tempData() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tempData'
     */
    public static int numElements_tempData() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'tempData'
     * for the given dimension.
     */
    public static int numElements_tempData(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: humidityData
    //   Field type: int[], unsigned
    //   Offset (bits): 80
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'humidityData' is signed (false).
     */
    public static boolean isSigned_humidityData() {
        return false;
    }

    /**
     * Return whether the field 'humidityData' is an array (true).
     */
    public static boolean isArray_humidityData() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'humidityData'
     */
    public static int offset_humidityData(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'humidityData'
     */
    public static int offsetBits_humidityData(int index1) {
        int offset = 80;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'humidityData' as a int[]
     */
    public int[] get_humidityData() {
        int[] tmp = new int[1];
        for (int index0 = 0; index0 < numElements_humidityData(0); index0++) {
            tmp[index0] = getElement_humidityData(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'humidityData' from the given int[]
     */
    public void set_humidityData(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_humidityData(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'humidityData'
     */
    public int getElement_humidityData(int index1) {
        return (int)getUIntBEElement(offsetBits_humidityData(index1), 16);
    }

    /**
     * Set an element of the array 'humidityData'
     */
    public void setElement_humidityData(int index1, int value) {
        setUIntBEElement(offsetBits_humidityData(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'humidityData'
     */
    public static int totalSize_humidityData() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'humidityData'
     */
    public static int totalSizeBits_humidityData() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'humidityData'
     */
    public static int elementSize_humidityData() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'humidityData'
     */
    public static int elementSizeBits_humidityData() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'humidityData'
     */
    public static int numDimensions_humidityData() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'humidityData'
     */
    public static int numElements_humidityData() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'humidityData'
     * for the given dimension.
     */
    public static int numElements_humidityData(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: photoData
    //   Field type: int[], unsigned
    //   Offset (bits): 96
    //   Size of each element (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'photoData' is signed (false).
     */
    public static boolean isSigned_photoData() {
        return false;
    }

    /**
     * Return whether the field 'photoData' is an array (true).
     */
    public static boolean isArray_photoData() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'photoData'
     */
    public static int offset_photoData(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'photoData'
     */
    public static int offsetBits_photoData(int index1) {
        int offset = 96;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 16;
        return offset;
    }

    /**
     * Return the entire array 'photoData' as a int[]
     */
    public int[] get_photoData() {
        int[] tmp = new int[1];
        for (int index0 = 0; index0 < numElements_photoData(0); index0++) {
            tmp[index0] = getElement_photoData(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'photoData' from the given int[]
     */
    public void set_photoData(int[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_photoData(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a int) of the array 'photoData'
     */
    public int getElement_photoData(int index1) {
        return (int)getUIntBEElement(offsetBits_photoData(index1), 16);
    }

    /**
     * Set an element of the array 'photoData'
     */
    public void setElement_photoData(int index1, int value) {
        setUIntBEElement(offsetBits_photoData(index1), 16, value);
    }

    /**
     * Return the total size, in bytes, of the array 'photoData'
     */
    public static int totalSize_photoData() {
        return (16 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'photoData'
     */
    public static int totalSizeBits_photoData() {
        return 16;
    }

    /**
     * Return the size, in bytes, of each element of the array 'photoData'
     */
    public static int elementSize_photoData() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'photoData'
     */
    public static int elementSizeBits_photoData() {
        return 16;
    }

    /**
     * Return the number of dimensions in the array 'photoData'
     */
    public static int numDimensions_photoData() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'photoData'
     */
    public static int numElements_photoData() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'photoData'
     * for the given dimension.
     */
    public static int numElements_photoData(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: timeStamp
    //   Field type: long[], unsigned
    //   Offset (bits): 112
    //   Size of each element (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'timeStamp' is signed (false).
     */
    public static boolean isSigned_timeStamp() {
        return false;
    }

    /**
     * Return whether the field 'timeStamp' is an array (true).
     */
    public static boolean isArray_timeStamp() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'timeStamp'
     */
    public static int offset_timeStamp(int index1) {
        int offset = 112;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'timeStamp'
     */
    public static int offsetBits_timeStamp(int index1) {
        int offset = 112;
        if (index1 < 0 || index1 >= 1) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 32;
        return offset;
    }

    /**
     * Return the entire array 'timeStamp' as a long[]
     */
    public long[] get_timeStamp() {
        long[] tmp = new long[1];
        for (int index0 = 0; index0 < numElements_timeStamp(0); index0++) {
            tmp[index0] = getElement_timeStamp(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'timeStamp' from the given long[]
     */
    public void set_timeStamp(long[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_timeStamp(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a long) of the array 'timeStamp'
     */
    public long getElement_timeStamp(int index1) {
        return (long)getUIntBEElement(offsetBits_timeStamp(index1), 32);
    }

    /**
     * Set an element of the array 'timeStamp'
     */
    public void setElement_timeStamp(int index1, long value) {
        setUIntBEElement(offsetBits_timeStamp(index1), 32, value);
    }

    /**
     * Return the total size, in bytes, of the array 'timeStamp'
     */
    public static int totalSize_timeStamp() {
        return (32 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'timeStamp'
     */
    public static int totalSizeBits_timeStamp() {
        return 32;
    }

    /**
     * Return the size, in bytes, of each element of the array 'timeStamp'
     */
    public static int elementSize_timeStamp() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'timeStamp'
     */
    public static int elementSizeBits_timeStamp() {
        return 32;
    }

    /**
     * Return the number of dimensions in the array 'timeStamp'
     */
    public static int numDimensions_timeStamp() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'timeStamp'
     */
    public static int numElements_timeStamp() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'timeStamp'
     * for the given dimension.
     */
    public static int numElements_timeStamp(int dimension) {
      int array_dims[] = { 1,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

}
